// GalilControl.cpp : implementation file
//

#include "stdafx.h"
#include "MachDevice.h"
#include "TrajectoryControl.h"
#include "Mach4View.h"
#include "Engine.h"
#include "rs274ngc.h"
#include "GalilControl.h"
#include "GalilStructs.h"
#include ".\galilcontrol.h"
#include "math.h"


extern TrajectoryControl *MainPlanner;	// used for most planner funcitons and program control 
extern CMach4View *MachView;			// used for most framework and configuration calls. 
extern TrajBuffer *Engine;				// Ring0 memory for printer port control and other device syncronisation
extern setup *_setup;					// Trajectory planners setup block. Always in effect 
// GalilControl

 bool m_UseRefPostion;
 bool m_UseCalcSpeed;

 GalilStruct State;

IMPLEMENT_DYNAMIC(GalilControl, CWnd)


 
 
#define ConProgramsz 30 //nLines + 1

GalilControl::GalilControl()
{
	//initialition of the Galil Unit controller
	State.Connected = false; // But were not connected as yet..
	m_DMCWin = new CDMCWin(1);
	
}

GalilControl::~GalilControl()
{
	 m_DMCWin->Close();
     delete m_DMCWin;
}


BEGIN_MESSAGE_MAP(GalilControl, CWnd)
END_MESSAGE_MAP()



// GalilControl message handlers

//Connects to the Galil 
bool GalilControl::Connect(void)
{
   // Open a connection to the controller 
	m_hDmc = NULL;
	MainPlanner->ExternalType = EX_4MS;
	rc =  m_DMCWin->Open(1,m_hWnd);
	State.IsMoving = false;
	if(!rc==DMCNOERROR)
	{
		rc = m_DMCWin->Close();
		SetMachError( "Galil card not connected!!" ); 
		State.Connected = false;
		return false;
	}
	rc = DMCOpen( 1, m_hWnd, &m_hDmc );
	rc = DMCGetDataRecordConstPointer( m_hDmc, (const char**)&State.Record );
	State.Connected = true;
	if( rc == S_OK )
       SetMachError( "Galil Communications begun!!" ); 	
	else
	{
       SetMachError( "Galil Communications Open, but error in getting data record.!!" ); 	
	   return false;
	}
	ResetControl();
	//set the max speeds of MAch3 for this device..
	for( int x = 0; x < 7; x++ )
		MainPlanner->ExternalPulseRates[x] = 3000000;

	//set the begin command for the correct axis number.
	switch( State.nAxis )
	{
	case( 1 ): State.Begin = "BG A"; State.Linear = "LMA"; break;
    case( 2 ): State.Begin = "BG AB";  State.Linear = "LMAB";break;
    case( 3 ): State.Begin = "BG ABC";  State.Linear = "LMABC";break;
    case( 4 ): State.Begin = "BG ABCD";  State.Linear = "LMABCD";break;
    case( 5 ): State.Begin = "BG ABCDE";  State.Linear = "LMABCDE";break;
    case( 6 ): State.Begin = "BG ABCDEF";  State.Linear = "LMABCDEF";break;

	}
	SendCommand("RS");
	SendCommand("HX0");
   	SendCommand("DT1"); //set for 1ms traffic..
	return true;
}

//Sends messages out the Status line of Mach3

void GalilControl::SetMachError(CString Message)
{
	CString *err = &MainPlanner->LastError;
	*err = Message;

}
//main update loop at 10hz.
void GalilControl::Update(void)
{
	static bool busy = false;
	

	if( busy ) return;
	busy = true;
	//Only gets called if we're connected, but called at 10hz..(Can be reprogrammed to as high as 50hz..)
 	USHORT sz = 0;
	rc = m_DMCWin->RefreshDataRecord(); //update the data block from the device. 
	if( rc == S_OK )
	{
	  State.IsMoving = false;
	  for( int x = 0; x< State.nAxis; x++ )
	    if( State.Record->AxisInfo[x].Status & 0x8000  ) 
			State.IsMoving = true;

	  if( !State.IsMoving && BufferLeft()== 511)
		  for( int x = 0; x< State.nAxis; x++ )
		  {
             Indexs[x] = Engine->Axis[x].Index;
		  }
      UpdateInputs(); //we have the data block, so update all the inputs..
	}
	else
	{   //Hmm, not speaking to us, lets stop everythinf for now, should never happen..
		SetMachError( "Galil Communications Failure.Restart program..!!" ); 
		Engine->EStop = true; //trigger an Estop so things come to a halt..
		rc = m_DMCWin->Close();
		State.Connected = false;
	}

	DoGCode();
    busy = false;
  
}

void GalilControl::UpdateInputs()
{
	//updates Mach3's input signals..
static CTime time = CTime::GetCurrentTime();
static int loop = 0;
static int    steps10[6];

	unsigned int in = (unsigned char)State.Record->Input0 |
		              (unsigned char)State.Record->Input1 << 8  |
					  (unsigned char)State.Record->Input1 << 16 |
					  (unsigned char)State.Record->Input1 << 24 ;
	//first put first 32 inputs in an integer. 
	for( int x = 0; x< nSigs; x++) //check all signals from 0 to max number of signals.
	{
		if( Engine->InSigs[x].Active &&
			Engine->InSigs[x].InPort == 1 ) //if this signal is turned on, and its set to port #1..check it..
		{
           if(( in >> (Engine->InSigs[x].InPin -1) ) & 0x01 ) // if the nth (pin number) bit is active..
			   Engine->InSigs[x].Activated = !Engine->InSigs[x].Negated; //set it high or low depending on the "low active"..
		   else
			   Engine->InSigs[x].Activated = Engine->InSigs[x].Negated; //setting..
     	}

	} //There, all digital inputs done..
  //Now outputs..
  //get 32 outputs..and see if we need to send a general output command..
  unsigned short outword = 0;
  bool outreq = false;
  unsigned int out  = (unsigned char)State.Record->Output0 |
		              (unsigned char)State.Record->Output1 << 8  |
					  (unsigned char)State.Record->Output2 << 16 |
					  (unsigned char)State.Record->Output3 << 24 ;
  for( int x = 0; x< nSigsOut; x++) //check all signals from 0 to max number of signals.
	{
		if( Engine->OutSigs[x].active &&
			Engine->OutSigs[x].OutPort == 1 && 
			Engine->OutSigs[x].OutPin < 16 ) //if this signal is turned on, and its set to port #1..check it..
		{
		   bool Should = Engine->OutSigs[x].Activated;
		   if( Should ) Should = !Engine->OutSigs[x].Negated;
           if( (( out >> ( Engine->OutSigs[x].OutPin -1 ) ) & 0x01 ) != Should )
		   {
            outword |= 1 << Engine->OutSigs[x].OutPin;
            //time to do output..         
            outreq = true; 

		   }
     	}

	}
  //since output words dont match with Mach3's output variables, lets update the Galil 
  //to proper output level. Should only occur whwn an output changes..
  if( outreq )
  {
	  CString Com;
	  Com.Format( "OP %d",outword );
	  SendCommand(Com.GetBuffer(20));
      int x = 9; //holder for debug;
  }
  //OK, so now lets read the encoders of the system..
  //We read only the Auxillary encoders..
  //We'll also update the main index registers here. SO the Axis DRO's 
  // reflect actual position in the machine coordinates.
  for( int x = 0; x< 7; x++)
  {
	 Engine->Encoders[x].Count[0] = State.Record->AxisInfo[x].AuxillaryPosition;

	 if( m_UseRefPostion ) Engine->Axis[x].Index = State.Record->AxisInfo[x].ReferencePosition;
	 else                  Engine->Axis[x].Index = State.Record->AxisInfo[x].MotorPosition;

  }

  //Well, since we're doign everything else in here..lets get the current velocities as well..
  //but this will only work for encoders on the motors.. 

  if( !m_UseCalcSpeed )
  {
    Engine->StatLast[0] = State.Record->AxisInfo[0].Velocity  / 5;
    Engine->StatLast[1] = State.Record->AxisInfo[1].Velocity  / 5;
    Engine->StatLast[2] = State.Record->AxisInfo[2].Velocity  / 5;
    Engine->StatLast[3] = State.Record->AxisInfo[3].Velocity  / 5;
    Engine->StatLast[4] = State.Record->AxisInfo[4].Velocity  / 5;
    Engine->StatLast[5] = State.Record->AxisInfo[5].Velocity  / 5;
  }
  else
  {
    //here we need to fake movement statistics due to no encoder..over 200ms..
	  loop++;
	  if( loop >= 2 )
	  {
	    
        loop = 0; 
		for( int x = 0; x<6;x++)
		{
			Engine->StatLast[x] = abs( Engine->Axis[x].Index - steps10[x]);
			steps10[x] = Engine->Axis[x].Index; //start with current position..
		}
	  }  
     
  }
  
  if( Engine->EStop )
	  EnsureStopped();

}

void GalilControl::JogOn( short axis, short dir, double speed)
{
	if( Engine->EStop )
	{
       SetMachError( "No Jogging in Estop!!" ); 
	   return;
	}
	if( Engine->TrajHead != Engine->TrajIndex ) return;
	SendCommand( "LE" );
    double JogFeed = (MainPlanner->Velocities[axis]); //rapid steps per second
    // JogSpeed OverRide. (Used in Velocity mode of MPG jog.) ?
    if( speed != 0 ) JogFeed = speed;
    //Keyboard Shift key is on?
    // If shift is not on, then JogPercent is the speed to use. 
   if( !(*MachView->m_ShiftState) && speed == 0) 
            JogFeed = (JogFeed * _setup->JogPercent / 100); //JogSteps/Sec..

    int accs[7];
	for( int x = 0; x < State.nAxis + 1; x++)
	{
		accs[x] = (int)(MainPlanner->Acceleration[x]  * MainPlanner->StepsPerAxis[x]);
	}
	//set the accelerations of tha axis..
	CString Com;
	Com.Format( "AC %d,%d,%d,%d,%d,%d ", accs[0], accs[1], accs[2], accs[3], accs[4], accs[5], accs[6] );
	HRESULT res = m_DMCWin->Command(Com.GetBuffer(20));
	
	Com.Format( "DC %d,%d,%d,%d,%d,%d ", accs[0], accs[1], accs[2], accs[3], accs[4], accs[5], accs[6] );
	res = m_DMCWin->Command(Com.GetBuffer(20));
    if( dir == 0 ) JogFeed = -JogFeed;
	int feeds[6];
	memset( feeds, 0, sizeof(int) * 6);
	Engine->Axis[axis].Jogging = true;
	feeds[axis] = (int) (JogFeed * MainPlanner->StepsPerAxis[axis]);
	Engine->Axis[axis].Memory[0] = feeds[axis];
	for( int x=0; x< State.nAxis + 1; x++)
		if( Engine->Axis[x].Jogging && x != axis )
		{
          feeds[x] = Engine->Axis[x].Memory[0];
		}

	Com.Format( "JG %d,%d,%d,%d,%d,%d ", feeds[0], feeds[1], feeds[2], feeds[3], feeds[4], feeds[5] );
	SendCommand(Com.GetBuffer(20));
	SendCommand(State.Begin.GetBuffer(20)); 
}

void GalilControl::JogOff( short axis )
{
   Engine->Axis[axis].Jogging = false;
   char * axiscoms[6] = {  "STA" , "STB" , "STC", "STD", "STE", "STF" }; 
   SendCommand(axiscoms[axis]); 
   SendCommand( "CD0,0=0" );
   bool injog = false;
   for( int x=0; x< State.nAxis + 1; x++)
		if( Engine->Axis[x].Jogging ) injog = true;
   if( !injog)
   {
	   Engine->Sync = true;
	   SendCommand(" ST ");
   }
   

}

void GalilControl::EnsureStopped( )
{ 
	//we get her eonly if we are EStopped. So stop all motion if any is going on..
	for( int x = 0; x< 6; x++) 
	  if( State.Record->AxisInfo[x].Status & 0x8000 ) JogOff( x );

    SendCommand( "LE" );
	SendCommand( "CD0,0=0" );
   
}
void GalilControl::ResetControl(void)
{
    //we do this at the start, and whenever reset is pressed. 
	if( !State.Connected)
	{
	   m_hDmc = NULL;
       rc =  m_DMCWin->Open(1,m_hWnd);
	   if(!rc==DMCNOERROR)
	   {
		 rc = m_DMCWin->Close();
		 SetMachError( "Galil card not connected after reset!!" ); 
		 State.Connected = false;
		 return;
	   }
	   rc = DMCOpen( 1, m_hWnd, &m_hDmc );
	   rc = DMCGetDataRecordConstPointer( m_hDmc, (const char**)&State.Record );
	   State.Connected = true;
	}
    SendCommand("CD,0=0"); 
	//GetNumber of axis
	double Types[6] = { 1, -1, -2, 2, -2.5, 2.5 }; 
	CString Com;
	SendCommand("TM 1000");
	State.nAxis = SendCommand( "QZ" );
	if( State.nAxis > 6 ) State.nAxis = 6;
	//now to set each axis to rigth type.
	CString total;
	total.Format( "MT %1.1f",Types[ State.motortype[0] ] );
    for( int x = 1; x < State.nAxis; x++)
	{
		Com.Format( ",%1.1f", Types[ State.motortype[x] ] );
		total += Com;
	}
    SendCommand( "ST" );
	Sleep(50);
	Com.Format("DP %i,%i,%i,%i,%i,%i",Engine->Axis[0].Index,
		                              Engine->Axis[1].Index,
									  Engine->Axis[2].Index, 
									  Engine->Axis[3].Index, 
									  Engine->Axis[4].Index, 
									  Engine->Axis[5].Index  );
	SendCommand( Com );

	SendCommand("TM 1000"); //Set time constant to 1000us ( 1ms)
    SendCommand( total );
    SendCommand( "SH" ); //servo here command to start the Galil's postioning algorithm
	SendCommand( "CD0,0=0" );
	 
}


//this routine for begugging command errors..

void GalilControl::CheckError( )
{
   long error = m_DMCWin->GetLastError();
   char err[80];
   m_DMCWin->GetErrorText( error, err, 80 ); 
   CString mess = err;
   SetMachError( mess ); 	
   int g = 9;
}

int GalilControl::BufferLeft(void)
{
	HRESULT res;
	CString Com;
	Com = "LM ?";
    ULONG ures = 80;
	char cres[80];
	res = m_DMCWin->Command(Com.GetBuffer(20), cres, ures);
	if( res != S_OK ) CheckError();
	State.BufferLeft = atoi( cres );
	return State.BufferLeft;
}

int GalilControl::SendCommand(CString com)
{
    HRESULT rc;
     BYTE BinaryCommand[100];
    ULONG BinaryLength;
	ULONG ures = 80;
	HRESULT res;
	char cres[80];

	char *buf = com.GetBuffer();
	short len = com.GetLength();
    rc = m_DMCWin->AsciiCommandToBinaryCommand( buf, len , BinaryCommand,100,&BinaryLength);
    if( rc == S_OK )
	{
      res = m_DMCWin->BinaryCommand( BinaryCommand,BinaryLength, cres, ures);
	  if( res != S_OK ) CheckError(); 
	  return atoi( cres );
	}
	res = m_DMCWin->Command( com.GetBuffer(), cres, ures);
	if( res != S_OK ) CheckError(); 
	return atoi( cres );


}


void GalilControl::SendProgram(char* Program[],int sz)
{
	CString com = " ";
	CString com2;
	for ( int x = 0; x < sz; x++ )
	{
		char *text = Program[x];
		com2 =  text;
		com += com2 + "\n";
		int h = 9;
	}
	
	//execute the program
	HRESULT res = m_DMCWin->DownloadFromBuffer( com.GetBuffer() );
	if( res != S_OK ) CheckError();
    com.Format("XQ%s,0", Program[0]);
	SendCommand( com );
}

void GalilControl::SetHead( int head )
{
	unsigned long t = 0;
    HRESULT res;
    CString test;
	char dummy[80];
	test = itoa( head, dummy, 10 );
	test = dummy;
	res = DMCArrayDownload( m_hDmc, "ring", 1, 1,test.GetBuffer(), test.GetLength(),  &t ); //set a new head.
    if( res!= S_OK ) { CheckError(); return; }

}

void GalilControl::DoGCode(void)
{
  CString Com,dummy;  
 static int totdist;
 if( 0 )
	 totdist = 0;;

 short slots = BufferLeft();
  if( slots < 511 && !State.IsMoving ) SendCommand( "BGS" );
 if( Engine->TrajHead == Engine->TrajIndex ) return;

 if( slots == 511 && !State.IsMoving )
	 SendCommand( State.Linear ); //turn on Linear mode cuz nothing is moving at the moment, just in case.

 if( slots < 100 ) return;
 SendCommand("VA 3000000");
 int loop = 0;
 while( Engine->TrajIndex != Engine->TrajHead )
 {
   loop++;
   Com = "LI ";
   short zeros = 0;
   double totaldist = 0;
   for( int x = 0; x < State.nAxis; x++)
   {
	   int points = Engine->Trajectories[Engine->TrajIndex].Points[x];
	   totdist += points;
       if( points == 0) zeros++;
	   totaldist += points * points;
	   dummy.Format( "%d,", points );
       Com += dummy;
   }
   CString c1;
   c1 = Com.Left( Com.GetLength() - 1 );
   double td = sqrt( totaldist ) / .004;
   CString out;
   out.Format( "VS %i",((int)(td) & 0xfffffffe));
   
   if( zeros != State.nAxis)
   {
	 if( td > 2 )
     SendCommand( out );
     SendCommand(c1); 
   }
   slots--;
   Engine->TrajIndex ++;
   Engine->TrajIndex &= 0xfff;
   
   if( slots < 50 ) break;
   if( loop > 50 ) break;
 }
 State.IsMoving = true;
 if( slots < 511 && !State.IsMoving ) SendCommand( "BGS" );
 if( Engine->TrajHead == Engine->TrajIndex )
	 SendCommand( "LE" );
 return;
}



