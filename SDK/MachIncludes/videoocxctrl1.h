#pragma once
#include "_Picture.h"

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CVideoocxctrl1 wrapper class

class CVideoocxctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CVideoocxctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xA91E1E79, 0x6AE7, 0x11D4, { 0xAD, 0x8, 0xA8, 0xAB, 0x2E, 0x81, 0x8B, 0x70 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DVideoOCX

// Functions
//

	BOOL ShowDriverDlg()
	{
		BOOL result;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Start()
	{
		BOOL result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Stop()
	{
		BOOL result;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ShowDisplayDlg()
	{
		BOOL result;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ShowFormatDlg()
	{
		BOOL result;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void Rewind()
	{
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL Next()
	{
		BOOL result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL Back()
	{
		BOOL result;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void SetErrorMessages(BOOL flag)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, flag);
	}
	long GetLen()
	{
		long result;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL SetOverlay(BOOL flag)
	{
		BOOL result;
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, flag);
		return result;
	}
	BOOL Close()
	{
		BOOL result;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long GetFrameNumber()
	{
		long result;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetWidth()
	{
		long result;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetHeight()
	{
		long result;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL SetPreview(BOOL flag)
	{
		BOOL result;
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, flag);
		return result;
	}
	void Transform(long sx, long sy, long * dx, long * dy)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms, sx, sy, dx, dy);
	}
	void ShowRectangle(long x0, long y0, long x1, long y1)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, x0, y0, x1, y1);
	}
	BOOL InitFromFile(LPCTSTR filename)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, filename);
		return result;
	}
	BOOL ShowInfoDlg()
	{
		BOOL result;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long GetFPS()
	{
		long result;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL SetResolution(long width, long height)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, width, height);
		return result;
	}
	BOOL Init()
	{
		BOOL result;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void Show(long image)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, image);
	}
	BOOL SaveBMP(long image, LPCTSTR name)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, image, name);
		return result;
	}
	void ReleaseImageHandle(long image)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms, image);
	}
	long GetGrayImageHandle()
	{
		long result;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetColorImageHandle()
	{
		long result;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetDataPointer(long imagehandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL CaptureStripe(long imagehandle, long startrow, long num)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle, startrow, num);
		return result;
	}
	long Capture(long imagehandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle);
		return result;
	}
	long GetDataSize()
	{
		long result;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void GetImageInfo(long imagehandle, long * width, long * height, long * datasize)
	{
		static BYTE parms[] = VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms, imagehandle, width, height, datasize);
	}
	long GetImageWidth(long imagehandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle);
		return result;
	}
	long GetImageHeight(long imagehandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle);
		return result;
	}
	long GetImageDataSize(long imagehandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle);
		return result;
	}
	long GetLastErrorNum()
	{
		long result;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetLastErrorString()
	{
		CString result;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL ShowSourceDlg()
	{
		BOOL result;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL ToGray(long colorimagehandle, long grayimagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, colorimagehandle, grayimagehandle);
		return result;
	}
	BOOL AVISaveFrameClose()
	{
		BOOL result;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVISaveFrameAdd(long imagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL AVISaveFrameSetFps(long framerate)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, framerate);
		return result;
	}
	BOOL AVISaveFrameInit(LPCTSTR filename, long imagehandle, BOOL compressiondialog)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BOOL ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, filename, imagehandle, compressiondialog);
		return result;
	}
	BOOL AVISaveFrameSetSpeed(long scale)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, scale);
		return result;
	}
	long CreateColorImageHandle(long width, long height)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms, width, height);
		return result;
	}
	long CreateGrayImageHandle(long width, long height)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms, width, height);
		return result;
	}
	BOOL AVISaveFrameShowCompressionDlg(long imagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL AVISaveFrameSetCompression(long imagehandle, LPCTSTR fourcc, long quality)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_BSTR VTS_I4 ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle, fourcc, quality);
		return result;
	}
	BOOL ToClipboard(long imagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL CaptureToClipboard()
	{
		BOOL result;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SaveJPEG(long imagehandle, long quality, LPCTSTR filename)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle, quality, filename);
		return result;
	}
	LPDISPATCH ToPicture(long imagehandle)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL AVISaveMovieShowAudioDlg()
	{
		BOOL result;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVISaveMovieStart()
	{
		BOOL result;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVISaveMovieInit(LPCTSTR filename)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, filename);
		return result;
	}
	BOOL AVISaveMovieStop()
	{
		BOOL result;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVISaveMovieShowCompressionDlg()
	{
		BOOL result;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVISaveMovieClose()
	{
		BOOL result;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void GetVersion(LPCTSTR versionstring)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_EMPTY, NULL, parms, versionstring);
	}
	void AVISaveMovieSetFrameRate(float framespersecond)
	{
		static BYTE parms[] = VTS_R4 ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms, framespersecond);
	}
	BOOL ReleaseMatrixToImageHandle(long imagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL ReleaseMatrix()
	{
		BOOL result;
		InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	VARIANT GetMatrix(long imagehandle)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x47, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, imagehandle);
		return result;
	}
	BOOL Seek(long framenumber)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x48, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, framenumber);
		return result;
	}
	BOOL ShowInWindow(long imagehandle, long window, long left, long top, long width, long height)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x49, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle, window, left, top, width, height);
		return result;
	}
	long GetDriverCount()
	{
		long result;
		InvokeHelper(0x4a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetDriverName(long drivernum)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, drivernum);
		return result;
	}
	BOOL Initialize()
	{
		BOOL result;
		InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GetColorBands(long colorimage, long redimage, long greenimage, long blueimage)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, colorimage, redimage, greenimage, blueimage);
		return result;
	}
	BOOL AVIPlaybackMovieInit(LPCTSTR filename)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, filename);
		return result;
	}
	BOOL AVIPlaybackMovieStart()
	{
		BOOL result;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVIPlaybackMovieStop()
	{
		BOOL result;
		InvokeHelper(0x50, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVIPlaybackMovieClose()
	{
		BOOL result;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL AVIPlaybackMovieRewind()
	{
		BOOL result;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long AVIPlaybackMovieGetHeight()
	{
		long result;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long AVIPlaybackMovieGetWidth()
	{
		long result;
		InvokeHelper(0x54, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long AVIPlaybackMovieGetLen()
	{
		long result;
		InvokeHelper(0x55, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long AVIPlaybackGetPosition()
	{
		long result;
		InvokeHelper(0x56, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT ToJPEGArray(long imagehandle, long quality, long * size)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_PI4 ;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, imagehandle, quality, size);
		return result;
	}
	long ToJPEGPointer(long imagehandle, long quality, long * size)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_PI4 ;
		InvokeHelper(0x58, DISPATCH_METHOD, VT_I4, (void*)&result, parms, imagehandle, quality, size);
		return result;
	}
	BOOL ReleaseJPEGPointer(long jpeghandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x59, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, jpeghandle);
		return result;
	}
	BOOL Capture2(long imagehandle)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, imagehandle);
		return result;
	}
	void Show2(long imagehandle)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, imagehandle);
	}

// Properties
//

long GetDriver()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SetDriver(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
short GetMode()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}
void SetMode(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}
BOOL GetScaledDisplay()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}
void SetScaledDisplay(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}
long GetControlWidth()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetControlWidth(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
long GetControlHeight()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}
void SetControlHeight(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}
CPicture GetPicture()
{
	LPDISPATCH result;
	GetProperty(0x6, VT_DISPATCH, (void*)&result);
	return CPicture(result);
}
void SetPicture(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}
BOOL GetAudio()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}
void SetAudio(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}


};
